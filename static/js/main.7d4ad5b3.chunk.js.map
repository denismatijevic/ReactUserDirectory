{"version":3,"sources":["components/User/User.module.css","components/User/User.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","User","props","className","classes","RowContainer","src","person","picture","medium","name","title","first","last","Date","dob","date","toLocaleDateString","age","email","phone","location","city","country","Main","useState","currentUsers","setCurrentUsers","formText","setFormText","filteredUsers","setFilteredUsers","fetch","then","res","json","console","log","results","onClick","sortByAge","sorting","sort","a","b","ageA","ageANum","parseInt","substring","ageB","onSubmit","event","preventDefault","filteredUsersArray","filter","user","toLowerCase","type","id","onChange","target","value","map","index","key","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7d4ad5b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"RowContainer\":\"User_RowContainer__OwfCp\"};","import React,{useState} from \"react\";\nimport classes from \"./User.module.css\"\n\nconst User = (props) => (\n  <div className={classes.RowContainer}>\n    <img src={props.person.picture.medium} />\n    <span> {props.person.name.title+\" \"+props.person.name.first+\" \"+props.person.name.last}</span>\n    <span> {new Date (props.person.dob.date).toLocaleDateString()+\" \"+props.person.dob.age}</span>\n    <span> {props.person.email}</span>\n    <span> {props.person.phone}</span>\n    <span> {props.person.location.city+\", \"+props.person.location.country}</span>\n  </div>\n          \n)\n\nexport default User;","import React,{useState} from \"react\";\nimport User from \"../components/User/User\";\n\nconst Main = () => {\n  const[currentUsers, setCurrentUsers] = useState()\n  const[formText, setFormText] = useState()\n  const[filteredUsers, setFilteredUsers] = useState()\n\n  const getData = () => {\n    fetch('https://randomuser.me/api/?results=10')\n      .then(res=>res.json())\n      .then(res=>{\n        console.log(res.results)\n        setCurrentUsers(res.results)\n      })\n  }\n  const sortByAge = () => {\n      const sorting = [...currentUsers]\n      sorting.sort((a,b) => {\n      const ageA = a.dob.date \n      const ageANum = parseInt(ageA.substring(0, 4) + ageA.substring(5,7) + ageA.substring(8,10))\n      const ageB = b.dob.date \n      const ageBNum = parseInt(ageB.substring(0, 4) + ageB.substring(5,7) + ageB.substring(8,10))\n      return ageANum - ageBNum\n    })\n    setCurrentUsers(sorting)\n    console.log(sortByAge)\n  }\n  \n  // const handleShowAll = () => {\n  //   setFilteredUsers()\n  // }\n\n  const handleChange = event => {\n    const {name, value} = event.target\n    console.log(value)\n    setFormText({\n      // ...formText,\n      [name]: value\n    })\n  }\n  const handleFormSubmit = event => {\n    event.preventDefault()\n    const filteredUsersArray = currentUsers.filter(user => {\n      return (user.name.first.toLowerCase()===formText.name.toLowerCase() ||\n      user.name.last.toLowerCase()===formText.name.toLowerCase())\n    })\n    setFilteredUsers(filteredUsersArray)\n  }\n  return( \n    // \"use effect look it up and use it\"\n    <div>\n      {!currentUsers && getData()}\n      <h1>Employee Data</h1>\n      <button className=\"inline-it\" onClick={()=>setFilteredUsers()}>Show All</button>\n      <button className=\"inline-it\" onClick={sortByAge}>Sort By Age</button>\n      <form className=\"inline-it\" onSubmit={handleFormSubmit}>\n      <input name=\"name\" type=\"name\" id=\"name\" onChange={handleChange}></input>\n      <button type=\"submit\">Submit</button>\n      </form>\n      {filteredUsers\n        ?filteredUsers.map((person, index)=> (\n          <div key={person.dob.date}>\n          <User person={person} />\n          </div>\n        ))\n        :currentUsers\n        && currentUsers.map((person, index)=>(\n          <div key={person.dob.date}>\n          <User person={person} />\n          </div>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default Main;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport Main from \"./pages/Main\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}